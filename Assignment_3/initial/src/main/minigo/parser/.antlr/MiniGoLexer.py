# Generated from d:/AST/assignment3/initial/src/main/minigo/parser/MiniGo.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,69,578,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,
        84,2,85,7,85,1,0,1,0,1,0,1,0,1,0,1,0,3,0,180,8,0,1,1,1,1,1,1,1,2,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,
        1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,26,
        1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,
        1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,
        1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,
        1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,
        1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,53,
        1,54,1,54,3,54,379,8,54,1,54,1,54,1,54,3,54,384,8,54,1,55,1,55,1,
        55,1,56,1,56,3,56,391,8,56,1,57,1,57,1,57,1,57,3,57,397,8,57,1,58,
        1,58,1,59,1,59,1,59,1,59,3,59,405,8,59,1,60,1,60,1,60,1,60,3,60,
        411,8,60,1,61,1,61,1,61,1,61,3,61,417,8,61,1,62,1,62,1,62,3,62,422,
        8,62,1,63,1,63,1,63,1,64,1,64,1,64,1,64,3,64,431,8,64,1,65,1,65,
        1,65,3,65,436,8,65,1,66,1,66,1,66,1,67,1,67,1,67,1,67,3,67,445,8,
        67,1,68,1,68,1,68,3,68,450,8,68,1,69,1,69,1,69,1,70,1,70,1,70,5,
        70,458,8,70,10,70,12,70,461,9,70,3,70,463,8,70,1,71,5,71,466,8,71,
        10,71,12,71,469,9,71,3,71,471,8,71,1,72,1,72,3,72,475,8,72,1,72,
        4,72,478,8,72,11,72,12,72,479,3,72,482,8,72,1,73,4,73,485,8,73,11,
        73,12,73,486,1,73,1,73,1,73,1,73,1,74,1,74,3,74,495,8,74,1,75,1,
        75,1,75,1,76,1,76,1,76,1,77,1,77,5,77,505,8,77,10,77,12,77,508,9,
        77,1,77,1,77,1,78,1,78,1,79,1,79,1,79,1,79,1,79,5,79,519,8,79,10,
        79,12,79,522,9,79,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,5,
        80,533,8,80,10,80,12,80,536,9,80,1,80,1,80,1,81,4,81,541,8,81,11,
        81,12,81,542,1,81,1,81,1,82,3,82,548,8,82,1,82,1,82,1,82,1,82,1,
        83,1,83,1,83,1,84,1,84,5,84,559,8,84,10,84,12,84,562,9,84,1,84,3,
        84,565,8,84,1,84,1,84,1,85,1,85,5,85,571,8,85,10,85,12,85,574,9,
        85,1,85,1,85,1,85,1,520,0,86,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,103,
        52,105,0,107,0,109,0,111,53,113,54,115,55,117,0,119,0,121,56,123,
        0,125,0,127,57,129,0,131,0,133,58,135,0,137,0,139,59,141,0,143,0,
        145,0,147,60,149,0,151,0,153,0,155,61,157,62,159,63,161,64,163,65,
        165,66,167,67,169,68,171,69,1,0,12,3,0,65,90,95,95,97,122,1,0,48,
        57,1,0,49,57,1,0,48,55,3,0,48,57,65,70,97,102,2,0,69,69,101,101,
        2,0,43,43,45,45,4,0,10,10,13,13,34,34,92,92,5,0,34,34,92,92,110,
        110,114,114,116,116,2,0,10,10,13,13,3,0,9,9,12,13,32,32,2,1,10,10,
        13,13,596,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,
        0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
        0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
        0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,
        0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,
        0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,
        0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,
        0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,
        0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,
        0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
        0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,
        115,1,0,0,0,0,121,1,0,0,0,0,127,1,0,0,0,0,133,1,0,0,0,0,139,1,0,
        0,0,0,147,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,
        1,0,0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,
        0,171,1,0,0,0,1,179,1,0,0,0,3,181,1,0,0,0,5,184,1,0,0,0,7,189,1,
        0,0,0,9,193,1,0,0,0,11,200,1,0,0,0,13,205,1,0,0,0,15,210,1,0,0,0,
        17,217,1,0,0,0,19,227,1,0,0,0,21,234,1,0,0,0,23,238,1,0,0,0,25,244,
        1,0,0,0,27,250,1,0,0,0,29,254,1,0,0,0,31,263,1,0,0,0,33,269,1,0,
        0,0,35,275,1,0,0,0,37,279,1,0,0,0,39,284,1,0,0,0,41,290,1,0,0,0,
        43,298,1,0,0,0,45,300,1,0,0,0,47,302,1,0,0,0,49,304,1,0,0,0,51,306,
        1,0,0,0,53,308,1,0,0,0,55,311,1,0,0,0,57,314,1,0,0,0,59,316,1,0,
        0,0,61,319,1,0,0,0,63,321,1,0,0,0,65,324,1,0,0,0,67,327,1,0,0,0,
        69,330,1,0,0,0,71,332,1,0,0,0,73,335,1,0,0,0,75,337,1,0,0,0,77,340,
        1,0,0,0,79,343,1,0,0,0,81,346,1,0,0,0,83,349,1,0,0,0,85,352,1,0,
        0,0,87,354,1,0,0,0,89,356,1,0,0,0,91,358,1,0,0,0,93,360,1,0,0,0,
        95,362,1,0,0,0,97,364,1,0,0,0,99,366,1,0,0,0,101,368,1,0,0,0,103,
        370,1,0,0,0,105,372,1,0,0,0,107,374,1,0,0,0,109,383,1,0,0,0,111,
        385,1,0,0,0,113,390,1,0,0,0,115,396,1,0,0,0,117,398,1,0,0,0,119,
        404,1,0,0,0,121,410,1,0,0,0,123,416,1,0,0,0,125,421,1,0,0,0,127,
        423,1,0,0,0,129,430,1,0,0,0,131,435,1,0,0,0,133,437,1,0,0,0,135,
        444,1,0,0,0,137,449,1,0,0,0,139,451,1,0,0,0,141,462,1,0,0,0,143,
        470,1,0,0,0,145,481,1,0,0,0,147,484,1,0,0,0,149,494,1,0,0,0,151,
        496,1,0,0,0,153,499,1,0,0,0,155,502,1,0,0,0,157,511,1,0,0,0,159,
        513,1,0,0,0,161,528,1,0,0,0,163,540,1,0,0,0,165,547,1,0,0,0,167,
        553,1,0,0,0,169,556,1,0,0,0,171,568,1,0,0,0,173,180,3,53,26,0,174,
        180,3,55,27,0,175,180,3,57,28,0,176,180,3,59,29,0,177,180,3,61,30,
        0,178,180,3,63,31,0,179,173,1,0,0,0,179,174,1,0,0,0,179,175,1,0,
        0,0,179,176,1,0,0,0,179,177,1,0,0,0,179,178,1,0,0,0,180,2,1,0,0,
        0,181,182,5,105,0,0,182,183,5,102,0,0,183,4,1,0,0,0,184,185,5,101,
        0,0,185,186,5,108,0,0,186,187,5,115,0,0,187,188,5,101,0,0,188,6,
        1,0,0,0,189,190,5,102,0,0,190,191,5,111,0,0,191,192,5,114,0,0,192,
        8,1,0,0,0,193,194,5,114,0,0,194,195,5,101,0,0,195,196,5,116,0,0,
        196,197,5,117,0,0,197,198,5,114,0,0,198,199,5,110,0,0,199,10,1,0,
        0,0,200,201,5,102,0,0,201,202,5,117,0,0,202,203,5,110,0,0,203,204,
        5,99,0,0,204,12,1,0,0,0,205,206,5,116,0,0,206,207,5,121,0,0,207,
        208,5,112,0,0,208,209,5,101,0,0,209,14,1,0,0,0,210,211,5,115,0,0,
        211,212,5,116,0,0,212,213,5,114,0,0,213,214,5,117,0,0,214,215,5,
        99,0,0,215,216,5,116,0,0,216,16,1,0,0,0,217,218,5,105,0,0,218,219,
        5,110,0,0,219,220,5,116,0,0,220,221,5,101,0,0,221,222,5,114,0,0,
        222,223,5,102,0,0,223,224,5,97,0,0,224,225,5,99,0,0,225,226,5,101,
        0,0,226,18,1,0,0,0,227,228,5,115,0,0,228,229,5,116,0,0,229,230,5,
        114,0,0,230,231,5,105,0,0,231,232,5,110,0,0,232,233,5,103,0,0,233,
        20,1,0,0,0,234,235,5,105,0,0,235,236,5,110,0,0,236,237,5,116,0,0,
        237,22,1,0,0,0,238,239,5,102,0,0,239,240,5,108,0,0,240,241,5,111,
        0,0,241,242,5,97,0,0,242,243,5,116,0,0,243,24,1,0,0,0,244,245,5,
        99,0,0,245,246,5,111,0,0,246,247,5,110,0,0,247,248,5,115,0,0,248,
        249,5,116,0,0,249,26,1,0,0,0,250,251,5,118,0,0,251,252,5,97,0,0,
        252,253,5,114,0,0,253,28,1,0,0,0,254,255,5,99,0,0,255,256,5,111,
        0,0,256,257,5,110,0,0,257,258,5,116,0,0,258,259,5,105,0,0,259,260,
        5,110,0,0,260,261,5,117,0,0,261,262,5,101,0,0,262,30,1,0,0,0,263,
        264,5,98,0,0,264,265,5,114,0,0,265,266,5,101,0,0,266,267,5,97,0,
        0,267,268,5,107,0,0,268,32,1,0,0,0,269,270,5,114,0,0,270,271,5,97,
        0,0,271,272,5,110,0,0,272,273,5,103,0,0,273,274,5,101,0,0,274,34,
        1,0,0,0,275,276,5,110,0,0,276,277,5,105,0,0,277,278,5,108,0,0,278,
        36,1,0,0,0,279,280,5,116,0,0,280,281,5,114,0,0,281,282,5,117,0,0,
        282,283,5,101,0,0,283,38,1,0,0,0,284,285,5,102,0,0,285,286,5,97,
        0,0,286,287,5,108,0,0,287,288,5,115,0,0,288,289,5,101,0,0,289,40,
        1,0,0,0,290,291,5,98,0,0,291,292,5,111,0,0,292,293,5,111,0,0,293,
        294,5,108,0,0,294,295,5,101,0,0,295,296,5,97,0,0,296,297,5,110,0,
        0,297,42,1,0,0,0,298,299,5,43,0,0,299,44,1,0,0,0,300,301,5,45,0,
        0,301,46,1,0,0,0,302,303,5,42,0,0,303,48,1,0,0,0,304,305,5,47,0,
        0,305,50,1,0,0,0,306,307,5,37,0,0,307,52,1,0,0,0,308,309,5,61,0,
        0,309,310,5,61,0,0,310,54,1,0,0,0,311,312,5,33,0,0,312,313,5,61,
        0,0,313,56,1,0,0,0,314,315,5,60,0,0,315,58,1,0,0,0,316,317,5,60,
        0,0,317,318,5,61,0,0,318,60,1,0,0,0,319,320,5,62,0,0,320,62,1,0,
        0,0,321,322,5,62,0,0,322,323,5,61,0,0,323,64,1,0,0,0,324,325,5,38,
        0,0,325,326,5,38,0,0,326,66,1,0,0,0,327,328,5,124,0,0,328,329,5,
        124,0,0,329,68,1,0,0,0,330,331,5,33,0,0,331,70,1,0,0,0,332,333,5,
        58,0,0,333,334,5,61,0,0,334,72,1,0,0,0,335,336,5,61,0,0,336,74,1,
        0,0,0,337,338,5,43,0,0,338,339,5,61,0,0,339,76,1,0,0,0,340,341,5,
        45,0,0,341,342,5,61,0,0,342,78,1,0,0,0,343,344,5,42,0,0,344,345,
        5,61,0,0,345,80,1,0,0,0,346,347,5,47,0,0,347,348,5,61,0,0,348,82,
        1,0,0,0,349,350,5,37,0,0,350,351,5,61,0,0,351,84,1,0,0,0,352,353,
        5,46,0,0,353,86,1,0,0,0,354,355,5,58,0,0,355,88,1,0,0,0,356,357,
        5,40,0,0,357,90,1,0,0,0,358,359,5,41,0,0,359,92,1,0,0,0,360,361,
        5,123,0,0,361,94,1,0,0,0,362,363,5,125,0,0,363,96,1,0,0,0,364,365,
        5,91,0,0,365,98,1,0,0,0,366,367,5,93,0,0,367,100,1,0,0,0,368,369,
        5,44,0,0,369,102,1,0,0,0,370,371,5,59,0,0,371,104,1,0,0,0,372,373,
        7,0,0,0,373,106,1,0,0,0,374,375,7,1,0,0,375,108,1,0,0,0,376,379,
        3,105,52,0,377,379,3,107,53,0,378,376,1,0,0,0,378,377,1,0,0,0,379,
        380,1,0,0,0,380,381,3,109,54,0,381,384,1,0,0,0,382,384,1,0,0,0,383,
        378,1,0,0,0,383,382,1,0,0,0,384,110,1,0,0,0,385,386,3,105,52,0,386,
        387,3,109,54,0,387,112,1,0,0,0,388,391,3,37,18,0,389,391,3,39,19,
        0,390,388,1,0,0,0,390,389,1,0,0,0,391,114,1,0,0,0,392,397,3,121,
        60,0,393,397,3,127,63,0,394,397,3,139,69,0,395,397,3,133,66,0,396,
        392,1,0,0,0,396,393,1,0,0,0,396,394,1,0,0,0,396,395,1,0,0,0,397,
        116,1,0,0,0,398,399,7,2,0,0,399,118,1,0,0,0,400,401,3,107,53,0,401,
        402,3,119,59,0,402,405,1,0,0,0,403,405,1,0,0,0,404,400,1,0,0,0,404,
        403,1,0,0,0,405,120,1,0,0,0,406,407,3,117,58,0,407,408,3,119,59,
        0,408,411,1,0,0,0,409,411,5,48,0,0,410,406,1,0,0,0,410,409,1,0,0,
        0,411,122,1,0,0,0,412,413,5,48,0,0,413,417,5,98,0,0,414,415,5,48,
        0,0,415,417,5,66,0,0,416,412,1,0,0,0,416,414,1,0,0,0,417,124,1,0,
        0,0,418,419,2,48,49,0,419,422,3,125,62,0,420,422,2,48,49,0,421,418,
        1,0,0,0,421,420,1,0,0,0,422,126,1,0,0,0,423,424,3,123,61,0,424,425,
        3,125,62,0,425,128,1,0,0,0,426,427,5,48,0,0,427,431,5,111,0,0,428,
        429,5,48,0,0,429,431,5,79,0,0,430,426,1,0,0,0,430,428,1,0,0,0,431,
        130,1,0,0,0,432,433,7,3,0,0,433,436,3,131,65,0,434,436,7,3,0,0,435,
        432,1,0,0,0,435,434,1,0,0,0,436,132,1,0,0,0,437,438,3,129,64,0,438,
        439,3,131,65,0,439,134,1,0,0,0,440,441,5,48,0,0,441,445,5,120,0,
        0,442,443,5,48,0,0,443,445,5,88,0,0,444,440,1,0,0,0,444,442,1,0,
        0,0,445,136,1,0,0,0,446,447,7,4,0,0,447,450,3,137,68,0,448,450,7,
        4,0,0,449,446,1,0,0,0,449,448,1,0,0,0,450,138,1,0,0,0,451,452,3,
        135,67,0,452,453,3,137,68,0,453,140,1,0,0,0,454,463,5,48,0,0,455,
        459,7,2,0,0,456,458,3,107,53,0,457,456,1,0,0,0,458,461,1,0,0,0,459,
        457,1,0,0,0,459,460,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,462,
        454,1,0,0,0,462,455,1,0,0,0,463,142,1,0,0,0,464,466,3,107,53,0,465,
        464,1,0,0,0,466,469,1,0,0,0,467,465,1,0,0,0,467,468,1,0,0,0,468,
        471,1,0,0,0,469,467,1,0,0,0,470,467,1,0,0,0,470,471,1,0,0,0,471,
        144,1,0,0,0,472,474,7,5,0,0,473,475,7,6,0,0,474,473,1,0,0,0,474,
        475,1,0,0,0,475,477,1,0,0,0,476,478,3,107,53,0,477,476,1,0,0,0,478,
        479,1,0,0,0,479,477,1,0,0,0,479,480,1,0,0,0,480,482,1,0,0,0,481,
        472,1,0,0,0,481,482,1,0,0,0,482,146,1,0,0,0,483,485,3,107,53,0,484,
        483,1,0,0,0,485,486,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,
        488,1,0,0,0,488,489,3,85,42,0,489,490,3,143,71,0,490,491,3,145,72,
        0,491,148,1,0,0,0,492,495,3,151,75,0,493,495,8,7,0,0,494,492,1,0,
        0,0,494,493,1,0,0,0,495,150,1,0,0,0,496,497,5,92,0,0,497,498,7,8,
        0,0,498,152,1,0,0,0,499,500,5,92,0,0,500,501,8,8,0,0,501,154,1,0,
        0,0,502,506,5,34,0,0,503,505,3,149,74,0,504,503,1,0,0,0,505,508,
        1,0,0,0,506,504,1,0,0,0,506,507,1,0,0,0,507,509,1,0,0,0,508,506,
        1,0,0,0,509,510,5,34,0,0,510,156,1,0,0,0,511,512,3,35,17,0,512,158,
        1,0,0,0,513,514,5,47,0,0,514,515,5,42,0,0,515,520,1,0,0,0,516,519,
        3,159,79,0,517,519,9,0,0,0,518,516,1,0,0,0,518,517,1,0,0,0,519,522,
        1,0,0,0,520,521,1,0,0,0,520,518,1,0,0,0,521,523,1,0,0,0,522,520,
        1,0,0,0,523,524,5,42,0,0,524,525,5,47,0,0,525,526,1,0,0,0,526,527,
        6,79,0,0,527,160,1,0,0,0,528,529,5,47,0,0,529,530,5,47,0,0,530,534,
        1,0,0,0,531,533,8,9,0,0,532,531,1,0,0,0,533,536,1,0,0,0,534,532,
        1,0,0,0,534,535,1,0,0,0,535,537,1,0,0,0,536,534,1,0,0,0,537,538,
        6,80,0,0,538,162,1,0,0,0,539,541,7,10,0,0,540,539,1,0,0,0,541,542,
        1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,544,1,0,0,0,544,545,
        6,81,0,0,545,164,1,0,0,0,546,548,5,13,0,0,547,546,1,0,0,0,547,548,
        1,0,0,0,548,549,1,0,0,0,549,550,5,10,0,0,550,551,1,0,0,0,551,552,
        6,82,1,0,552,166,1,0,0,0,553,554,9,0,0,0,554,555,6,83,2,0,555,168,
        1,0,0,0,556,560,5,34,0,0,557,559,3,149,74,0,558,557,1,0,0,0,559,
        562,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,564,1,0,0,0,562,
        560,1,0,0,0,563,565,7,11,0,0,564,563,1,0,0,0,565,566,1,0,0,0,566,
        567,6,84,3,0,567,170,1,0,0,0,568,572,5,34,0,0,569,571,3,149,74,0,
        570,569,1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,1,0,0,0,
        573,575,1,0,0,0,574,572,1,0,0,0,575,576,3,153,76,0,576,577,6,85,
        4,0,577,172,1,0,0,0,32,0,179,378,383,390,396,404,410,416,421,430,
        435,444,449,459,462,467,470,474,479,481,486,494,506,518,520,534,
        542,547,560,564,572,5,6,0,0,1,82,0,1,83,1,1,84,2,1,85,3
    ]

class MiniGoLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMPARE_OPERATOR = 1
    IF = 2
    ELSE = 3
    FOR = 4
    RETURN = 5
    FUNC = 6
    TYPE = 7
    STRUCT = 8
    INTERFACE = 9
    STRING = 10
    INT = 11
    FLOAT = 12
    CONST = 13
    VAR = 14
    CONTINUE = 15
    BREAK = 16
    RANGE = 17
    NIL = 18
    TRUE = 19
    FALSE = 20
    BOOLEAN = 21
    ADD = 22
    SUB = 23
    MUL = 24
    DIV = 25
    MOD = 26
    EQUAL = 27
    NOT_EQUAL = 28
    LESS = 29
    LESS_EQUAL = 30
    GREATER = 31
    GREATER_EQUAL = 32
    AND = 33
    OR = 34
    NOT = 35
    ASS_DECLARE = 36
    ASSIGN = 37
    ADD_ASSIGN = 38
    SUB_ASSIGN = 39
    MUL_ASSIGN = 40
    DIV_ASSIGN = 41
    MOD_ASSIGN = 42
    DOT = 43
    COLON = 44
    LPAREN = 45
    RPAREN = 46
    LBRACE = 47
    RBRACE = 48
    LBRACKET = 49
    RBRACKET = 50
    COMMA = 51
    SEMICOLON = 52
    ID = 53
    BOOLEAN_LIT = 54
    INTEGER_LITERAL = 55
    DECIMAL_LITERAL = 56
    BINARY_LITERAL = 57
    OCTAL_LITERAL = 58
    HEX_LITERAL = 59
    FLOATING_LITERAL = 60
    STRING_LITERAL = 61
    NIL_LIT = 62
    COMMENT_BLOCK = 63
    COMMENT_LINE = 64
    WS = 65
    NEWLINE = 66
    ERROR_CHAR = 67
    UNCLOSE_STRING = 68
    ILLEGAL_ESCAPE = 69

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'else'", "'for'", "'return'", "'func'", "'type'", "'struct'", 
            "'interface'", "'string'", "'int'", "'float'", "'const'", "'var'", 
            "'continue'", "'break'", "'range'", "'nil'", "'true'", "'false'", 
            "'boolean'", "'+'", "'-'", "'*'", "'/'", "'%'", "'=='", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'!'", "':='", 
            "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'.'", "':'", 
            "'('", "')'", "'{'", "'}'", "'['", "']'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "COMPARE_OPERATOR", "IF", "ELSE", "FOR", "RETURN", "FUNC", "TYPE", 
            "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", "CONST", "VAR", 
            "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", "FALSE", "BOOLEAN", 
            "ADD", "SUB", "MUL", "DIV", "MOD", "EQUAL", "NOT_EQUAL", "LESS", 
            "LESS_EQUAL", "GREATER", "GREATER_EQUAL", "AND", "OR", "NOT", 
            "ASS_DECLARE", "ASSIGN", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
            "DIV_ASSIGN", "MOD_ASSIGN", "DOT", "COLON", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "LBRACKET", "RBRACKET", "COMMA", "SEMICOLON", 
            "ID", "BOOLEAN_LIT", "INTEGER_LITERAL", "DECIMAL_LITERAL", "BINARY_LITERAL", 
            "OCTAL_LITERAL", "HEX_LITERAL", "FLOATING_LITERAL", "STRING_LITERAL", 
            "NIL_LIT", "COMMENT_BLOCK", "COMMENT_LINE", "WS", "NEWLINE", 
            "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    ruleNames = [ "COMPARE_OPERATOR", "IF", "ELSE", "FOR", "RETURN", "FUNC", 
                  "TYPE", "STRUCT", "INTERFACE", "STRING", "INT", "FLOAT", 
                  "CONST", "VAR", "CONTINUE", "BREAK", "RANGE", "NIL", "TRUE", 
                  "FALSE", "BOOLEAN", "ADD", "SUB", "MUL", "DIV", "MOD", 
                  "EQUAL", "NOT_EQUAL", "LESS", "LESS_EQUAL", "GREATER", 
                  "GREATER_EQUAL", "AND", "OR", "NOT", "ASS_DECLARE", "ASSIGN", 
                  "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", "DIV_ASSIGN", 
                  "MOD_ASSIGN", "DOT", "COLON", "LPAREN", "RPAREN", "LBRACE", 
                  "RBRACE", "LBRACKET", "RBRACKET", "COMMA", "SEMICOLON", 
                  "LETTER", "DIGIT", "ID_PART", "ID", "BOOLEAN_LIT", "INTEGER_LITERAL", 
                  "NON_ZERO_DIGIT", "DECIMAL_LIST", "DECIMAL_LITERAL", "START_BINARY_LIT", 
                  "BINARY_LIST", "BINARY_LITERAL", "START_OCTAL_LIT", "OCTAL_DIGIT", 
                  "OCTAL_LITERAL", "START_HEX_LIT", "HEX_DIGIT", "HEX_LITERAL", 
                  "DIGITS", "OPT_FRAC", "OPT_EXP", "FLOATING_LITERAL", "STR_CHAR", 
                  "ESC_SEQ", "ESC_ILLEGAL", "STRING_LITERAL", "NIL_LIT", 
                  "COMMENT_BLOCK", "COMMENT_LINE", "WS", "NEWLINE", "ERROR_CHAR", 
                  "UNCLOSE_STRING", "ILLEGAL_ESCAPE" ]

    grammarFileName = "MiniGo.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    prevtoken = None
    def nextToken(self):
    	next_token = super().nextToken()    
    	self.prevtoken = next_token
    	return next_token
    def emit(self):
        tk = self.type
        if tk == self.UNCLOSE_STRING:       
            result = super().emit();
            raise UncloseString(result.text);
        elif tk == self.ILLEGAL_ESCAPE:
            result = super().emit();
            raise IllegalEscape(result.text);
        elif tk == self.ERROR_CHAR:
            result = super().emit();
            raise ErrorToken(result.text); 
        else:
            return super().emit();


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[82] = self.NEWLINE_action 
            actions[83] = self.ERROR_CHAR_action 
            actions[84] = self.UNCLOSE_STRING_action 
            actions[85] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:

                if self.prevtoken is not None and self.prevtoken.type in {
                    self.ID, 
                    self.RPAREN, 
                    self.RBRACKET, 
                    self.RBRACE,
                    self.INTEGER_LITERAL, 
                    self.BINARY_LITERAL, 
                    self.OCTAL_LITERAL, 
                    self.HEX_LITERAL,
                    self.FLOATING_LITERAL, 
                    self.TRUE, 
                    self.FALSE, 
                    self.STRING_LITERAL,
                    self.RETURN, 
                    self.CONTINUE, 
                    self.BREAK,
                    self.INT, self.FLOAT, self.BOOLEAN, self.STRING, self.NIL
                }:
                    self.text = ";"
                    self.type = self.SEMICOLON
                else:
                    self.skip()

     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

                if(len(self.text) >= 2 and self.text[-1] == '\n' and self.text[-2] == '\r'):
                    raise UncloseString(self.text[0:-2])
                elif (self.text[-1] == '\n'):
                    raise UncloseString(self.text[0:-1])
                elif (self.text[-1] == '\r'):
                    raise UncloseString(self.text[0:-1])
                else:
                    raise UncloseString(self.text[0:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:

                raise IllegalEscape(self.text[0:])

     


